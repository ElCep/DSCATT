
to init-fertilite-au-patch
  ;; champs de case
  ask patches with [proprietaire != "zone cuisine" and proprietaire != "bordures"  and zone = "case"]
  [
    ;; unité : kg de matiere organique,
    set fertilite surface-de-patch  * random-normal COS-champ-case-moy COS-champ-case-sd
  ]
  ;; champs de brousse
  ask patches with [proprietaire != "zone cuisine" and proprietaire != "bordures"  and zone != "case"]
  [
    ;; unité : kg de matiere organique, 
    set fertilite surface-de-patch  * random-normal COS-champ-brousse-moy COS-champ-brousse-sd
  ]
end



to init-fertilite-a-la-parcelle
ask cuisines [
  let myParcelles [parcelle-id] of patches with [proprietaire = myself] ; liste des ID de toutes mes parcelles
     
  foreach myParcelles [
     x -> 
      let fertilite-parcelle  ifelse-value zone = "case"
                                           [surface-de-patch  * random-normal COS-champ-case-moy COS-champ-case-sd]
                                           [surface-de-patch  * random-normal COS-champ-brousse-moy COS-champ-brousse-sd]
      ask patches with[parcelle-id = x][
        set fertilite fertilite-parcelle
      ]    
  ]
]
 
end

to MAJ-fertilite

  let nb-patches-Jach count patches with [cycle = 3]

  ;; fumure dans les champs de brousse
  ask patches with [cycle = 3 and proprietaire != "zone cuisine" and proprietaire != "bordures" and zone != "case" ][
    set fertilite fertilite + ((troupeau * COS-par-tete) / nb-patches-Jach)
  ]

  ;;show word "fumure" ((troupeau * fumier-par-tete) / nb-patches-Jach)
  ;; culture
  ask patches with [cycle < 3 and proprietaire != "zone cuisine" and proprietaire != "bordures" and zone != "case" and cultived?][
    set fertilite fertilite -  (surface-de-patch * conso-carbone-culture)
  ]

  ;;show word "culture" (surface-de-patch *  conso-carbone-culture)

  ask cuisines [
    foreach idmyParcellesCultive[
  ;;    x-> ask patches with [parcelle-id = x][]
    ]
  ]

end

