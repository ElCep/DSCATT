
to partition-init
ask cuisines [
    foreach [ "J1" "J2" "J3"][
      x -> ask n-of (random spl-champ-brousse-par-cuisine + 1) patches with [ zone = x and proprietaire != "bordures"]
      [
        set pcolor [color] of myself
        set proprietaire myself
        set locataire myself
       sprout 1 [
          ask patch-here [ set parcelle-id [who] of myself]
          die
        ]
      ]
    ];; foreach



    ;; champ de case hors des maisons
    ask n-of (random spl-champ-case-par-cuisine + 1) champsDeCase
    [
      set pcolor [color] of myself
      set proprietaire myself
      set locataire myself 
      sprout 1
      [
          ask patch-here [ set parcelle-id [who] of myself]
        die
      ]

    ]

  ]
end ;; partition init

to partition-iteration
  
  ask cuisines [
  foreach [ "J1" "J2" "J3" "case"][
      x -> ask patches with [ zone = x and proprietaire =  myself]
      [
        ask neighbors with [zone = x and  proprietaire = -99  and ( pxcor > 25 or pycor > 25)]
        [
          set pcolor [pcolor] of myself
          set proprietaire [proprietaire] of myself
          set locataire proprietaire 
          
          set parcelle-id [parcelle-id] of myself
        ]
      ]
  ];; foreach
  ]

  if any? patches with [proprietaire = -99]
  [
    partition-iteration
  ]

end ;; partition iteration


to detecter-frontieres 
  
  let gini-souhait 0.3
  let gini-current calcul-gini
  let batch 10
  
  ask tousLesChamps with  [ 
   ;;[proprietaire] of one-of neighbors4   !=  proprietaire and
    
    any?  neighbors with [proprietaire != [proprietaire] of myself] and
    not any?  neighbors with [proprietaire = "bordures"] and 
    not any? neighbors with [proprietaire = "zone cuisine"] 
  ]
    
  [
  
   set pcolor black     
        
 ]
 
end


to etalement-parcelle
  
  
  let to-revert-patch []
  let to-revert-pcolor []
  let to-revert-proprietaire[]
  let to-revert-parcelle-id []
  
  
  let gini-current calcul-gini
  
  
  let une-id one-of [parcelle-id] of patches
  let un-patch-de-parcelle one-of patches with  [parcelle-id = une-id]
 
  ask patches with  [parcelle-id = une-id and 
    proprietaire != "bordures" and proprietaire != "zone cuisine" and
    any?  neighbors with [proprietaire != [proprietaire] of myself] and
    not any?  neighbors with [proprietaire = "bordures"] and 
    not any? neighbors with [proprietaire = "zone cuisine"] 
  ]
  [
    
      
    ask neighbors [
      ;; sauvegarde de l'état avant les modifs
      set to-revert-patch lput self to-revert-patch
      set to-revert-pcolor lput pcolor to-revert-pcolor 
      set to-revert-proprietaire lput proprietaire to-revert-proprietaire 
      set to-revert-parcelle-id  lput parcelle-id to-revert-parcelle-id
  

      
      set pcolor [pcolor] of un-patch-de-parcelle
      set proprietaire [proprietaire] of un-patch-de-parcelle
      set parcelle-id [parcelle-id] of un-patch-de-parcelle
    ]
  ] ;; 
  
  let gini-apres calcul-gini
  let delta1 abs ( gini-current - gini-parcelles)
  let  delta2 abs (gini-apres - gini-parcelles)
   
  
  ;;si ça n'améliore pas le gini on revient en arrière
  ;; ajout dans la condition pour stochastique si besoin de controle par la temperature : ;:and  ( random-float 1 >  exp  (- abs (delta1 - delta2) / temperature)   )
   if delta1 < delta2 
   [
     ;; defaire
     ask patch-set to-revert-patch[
       let idxself (position self to-revert-patch)
       set pcolor  item  idxself  to-revert-pcolor   
       set proprietaire  item  idxself  to-revert-proprietaire
       set parcelle-id  item  idxself  to-revert-parcelle-id
     ]   
  ]
  
  if min (list delta1 delta2) > seuil-gini [
    etalement-parcelle
  ]
   
end


