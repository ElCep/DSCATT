;; Est-ce qu'il y a des gens qui ont sont en maque
;; s'il y des manques on va aller voir les autres agents qui ont de la place

to chercher-parcelles
  ;; Dans productivite.nls on définit si les cuisine ont suffisement de parcelles pour répondre à leurs besoin
  ;; Un atribut de cuisine tropParcelles? TRUE ou FALSE
  ;; Dans ce processus on doit appeller les cuisine qui on des besoin et on va leurs demander négocier des parcelles
  ;; avec les cuisines qui ont des parcelles à donner/preter
  let cuisines-en-diff cuisines with[calcul-besoin-tempo <= 0]
  let cuisines-autosuf cuisines with[calcul-besoin-tempo >= 0]
  ifelse (any? cuisines-autosuf) [ 
    ask cuisines-en-diff[
      ask one-of cuisines-autosuf [
        ;show word "list 1 " idmyParcellesSorted 
        ;show word "list 2 " idmyParcellesCultive
        let parcelleDispo set.jar:diff idmyParcellesSorted (sentence idmyParcellesCultiveA idmyParcellesCultiveM)
        if length parcelleDispo > 0 [
          show word "parcelles dispo " set.jar:diff idmyParcellesSorted (sentence idmyParcellesCultiveA idmyParcellesCultiveM)
          ask patches with[parcelle-id = parcelleDispo ][
            set cultived? TRUE
          ]
          ;; échange. TODO mettre à jour un propriétaire-id et ajouter un attribut pret pour connaitre le proprietaire originel 
        ;;  ask myself [
        ;;    set idmyParcellesCultive lput parcelleDispo idmyParcellesCultive
        ;;  ]
        ]
      ]
    ]
  ][
    show "ya plus personne" 
  ]
end

to-report calcul-besoin-tempo; contexte de cuisine
  ;; ce reporter nous renvois les besoin assouvi ou innasouvie pour les cuisine pour la saison en cour 
  let mes-besoin-actu taille * kg-nourriture-par-pers-jour * 365

  let raw-productionM (sum countMyCultivetedPlots "M") * surface-de-patch  /  10000 * kg-mil-par-ha
  let raw-productionA (sum countMyCultivetedPlots "A") * surface-de-patch  /  10000 * kg-arachide-par-ha * ratio-arachide-subsistence * taux-arachide-nourriture
  
  report mes-besoin-actu - (raw-productionA + raw-productionM)
end



to-report conversion-besoin-nourriture-surface-ha  ; contexte de cuisine 
  
  let rendement-moyen mean list (kg-mil-par-ha) (kg-arachide-par-ha * ratio-arachide-subsistence * taux-arachide-nourriture)

  let besoin [calcul-besoin-tempo] of self
  report (besoin / rendement-moyen)
  
end

to-report conversion-besoin-nourriture-surface-en-patches  ; contexte de cuisine 
  let rendement-moyen mean list (kg-mil-par-ha) (kg-arachide-par-ha * ratio-arachide-subsistence * taux-arachide-nourriture)
  let besoin [calcul-besoin-tempo] of self
 
  report round (((besoin / rendement-moyen) * 10000)  / surface-de-patch)
  
end




to resolution-pret
 
  show "resolution-pret"
  ;; agensets cuisines demandeuses et preteuses
  let cuisines-D cuisines with [conversion-besoin-nourriture-surface-ha > 0]
  let cuisines-P cuisines with [conversion-besoin-nourriture-surface-ha < 0]
   
  let nb-cuisines-D  count cuisines-D
  
  if any? cuisines-D [
  
  ask cuisines-P [
    set patches-pretables count patches with [proprietaire = self and not cultived? and cycle != 3 and zone != "case" and proprietaire != "bordures"]
  ]
  
  let sum-surfaces-CD sum [conversion-besoin-nourriture-surface-en-patches] of cuisines-D
  let sum-surfaces-pretables sum [patches-pretables] of cuisines-P
 
  ;; surface pretable moyenne 
 let surface-pretable-moyenne sum-surfaces-pretables /  nb-cuisines-D
 
 ask cuisines-D [
      show "MAJ surf escomp"
    set surface-escomptee   round ([conversion-besoin-nourriture-surface-en-patches] of self / sum-surfaces-CD) * surface-pretable-moyenne
  ]
 
  ]
  
  
end