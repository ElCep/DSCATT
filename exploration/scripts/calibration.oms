import _file_.model._


// Objective 1: population dynamics (1995, 2000, 2005, 2010, 2015, 2020)
 val populationSlopeFitness = 
   ScalaCode("""
      math.abs(488 - populationDynamic.last)
   """)

// Objective 2: kitchen size average is quite stable over years around 16
//val kitchenFitness= 
//  ScalaCode("""
//    math.abs(kitchenSizeAverage - 16)
//  """)

// Objective 3: effective fallow ratio in global landscape around 0.2
val fallowFitness= 
  ScalaCode("""
  math.abs(0.33 * effectiveFallowRatioDynamic.slice(15,20).average - 0.2)
  """)
  
  
val milYieldFitness= 
    ScalaCode("""
    math.abs(milYieldLast5YearsAverage - 700)
    """)
  

val popFallowFitness = Val[Double]
val fitnessTask = ScalaTask("""
    val popFallowFitness = math.abs(5.67 - populationSlope) + 
                           math.abs(488 - populationDynamic.last) +    
                           math.abs(0.33 * effectiveFallowRatioDynamic.slice(15,20).average - 0.2) +
                           math.abs(lastHerdSize - 160)
""") set (
    inputs += (populationRSquare, populationSlope, milYieldLast5YearsAverage, kitchenSizeAverage,
    populationDynamic, effectiveFallowRatioDynamic, kitchenSizeDynamic, herdDynamic, lastHerdSize),
    outputs += (popFallowFitness, populationRSquare, populationSlope, milYieldLast5YearsAverage, 
    kitchenSizeAverage, populationDynamic, effectiveFallowRatioDynamic, kitchenSizeDynamic, herdDynamic, lastHerdSize)
    )
  

val calibration = 
NSGA2Evolution(
  evaluation = model -- fitnessTask,
  objective = Seq(popFallowFitness,
        milYieldLast5YearsAverage evaluate milYieldFitness),
 //     populationSlope evaluate populationSlopeFitness,
 //     kitchenSizeAverage evaluate kitchenFitness,
 //     effectiveFallowRatioDynamic evaluate fallowFitness
 //   ),
  populationSize = 200,
  genome = Seq(
    soilQualityBasis in (0.0,3.0),
    fallowBoost in (0.0,1.0),
    peanutSeedToFood in (1.0, 1.6),
    expandingHerdSize in (1.0, 1.4)
    ),      
  distribution = Island(5 minutes),
  parallelism = 1000,
  termination = 1500000,
) hook (workDirectory / "results/calibration")


val local = LocalEnvironment(100)
calibration on local
